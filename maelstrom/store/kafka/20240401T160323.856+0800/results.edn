{:perf {:latency-graph {:valid? true},
        :rate-graph {:valid? true},
        :valid? true},
 :timeline {:valid? true},
 :exceptions {:valid? true,
              :exceptions ({:count 16030,
                            :class clojure.lang.ExceptionInfo,
                            :example #jepsen.history.Op{:index 4,
                                                        :time 39370834,
                                                        :type :info,
                                                        :process 2,
                                                        :f :poll,
                                                        :value [[:poll]],
                                                        :exception {:via [{:type clojure.lang.ExceptionInfo,
                                                                           :message "Malformed RPC response. Maelstrom sent node n0 the following request:\n\n{:offsets {}, :type \"poll\", :msg_id 1}\n\nAnd expected a response of the form:\n\n{:type (eq \"poll_ok\"),\n :msgs\n {(named Str \"key\")\n  [[{:schema (named Int \"offset\"), :optional? false, :name \"offset\"}\n    {:schema (named Any \"msg\"), :optional? false, :name \"msg\"}]]},\n {:k :msg_id} Int,\n :in_reply_to Int}\n\n... but instead received\n\n{:in_reply_to 1, :type \"poll_ok\"}\n\nThis is malformed because:\n\n{:msgs missing-required-key}\n\nSee doc/protocol.md for more guidance.",
                                                                           :data {:type :malformed-rpc-response,
                                                                                  :body {:in_reply_to 1,
                                                                                         :type "poll_ok"}},
                                                                           :at [slingshot.support$stack_trace
                                                                                invoke
                                                                                "support.clj"
                                                                                201]}],
                                                                    :trace [[slingshot.support$stack_trace
                                                                             invoke
                                                                             "support.clj"
                                                                             201]
                                                                            [maelstrom.client$check_body
                                                                             invokeStatic
                                                                             "client.clj"
                                                                             188]
                                                                            [maelstrom.client$check_body
                                                                             invoke
                                                                             "client.clj"
                                                                             181]
                                                                            [maelstrom.workload.kafka$fn__19297$poll__19298
                                                                             invoke
                                                                             "kafka.clj"
                                                                             99]
                                                                            [maelstrom.workload.kafka$fn__19297$poll__19298
                                                                             invoke
                                                                             "kafka.clj"
                                                                             99]
                                                                            [maelstrom.workload.kafka$apply_mop_BANG_
                                                                             invokeStatic
                                                                             "kafka.clj"
                                                                             173]
                                                                            [maelstrom.workload.kafka$apply_mop_BANG_
                                                                             invoke
                                                                             "kafka.clj"
                                                                             166]
                                                                            [maelstrom.workload.kafka.Client
                                                                             invoke_BANG_
                                                                             "kafka.clj"
                                                                             224]
                                                                            [jepsen.client.Validate
                                                                             invoke_BANG_
                                                                             "client.clj"
                                                                             83]
                                                                            [jepsen.generator.interpreter.ClientWorker
                                                                             invoke_BANG_
                                                                             "interpreter.clj"
                                                                             65]
                                                                            [jepsen.generator.interpreter$spawn_worker$fn__12908$fn__12909
                                                                             invoke
                                                                             "interpreter.clj"
                                                                             140]
                                                                            [jepsen.generator.interpreter$spawn_worker$fn__12908
                                                                             invoke
                                                                             "interpreter.clj"
                                                                             123]
                                                                            [clojure.core$binding_conveyor_fn$fn__5823
                                                                             invoke
                                                                             "core.clj"
                                                                             2047]
                                                                            [clojure.lang.AFn
                                                                             call
                                                                             "AFn.java"
                                                                             18]
                                                                            [java.util.concurrent.FutureTask
                                                                             run
                                                                             "FutureTask.java"
                                                                             317]
                                                                            [java.util.concurrent.ThreadPoolExecutor
                                                                             runWorker
                                                                             "ThreadPoolExecutor.java"
                                                                             1144]
                                                                            [java.util.concurrent.ThreadPoolExecutor$Worker
                                                                             run
                                                                             "ThreadPoolExecutor.java"
                                                                             642]
                                                                            [java.lang.Thread
                                                                             run
                                                                             "Thread.java"
                                                                             1583]],
                                                                    :cause "Malformed RPC response. Maelstrom sent node n0 the following request:\n\n{:offsets {}, :type \"poll\", :msg_id 1}\n\nAnd expected a response of the form:\n\n{:type (eq \"poll_ok\"),\n :msgs\n {(named Str \"key\")\n  [[{:schema (named Int \"offset\"), :optional? false, :name \"offset\"}\n    {:schema (named Any \"msg\"), :optional? false, :name \"msg\"}]]},\n {:k :msg_id} Int,\n :in_reply_to Int}\n\n... but instead received\n\n{:in_reply_to 1, :type \"poll_ok\"}\n\nThis is malformed because:\n\n{:msgs missing-required-key}\n\nSee doc/protocol.md for more guidance.",
                                                                    :data {:type :malformed-rpc-response,
                                                                           :body {:in_reply_to 1,
                                                                                  :type "poll_ok"}}},
                                                        :error "indeterminate: Malformed RPC response. Maelstrom sent node n0 the following request:\n\n{:offsets {}, :type \"poll\", :msg_id 1}\n\nAnd expected a response of the form:\n\n{:type (eq \"poll_ok\"),\n :msgs\n {(named Str \"key\")\n  [[{:schema (named Int \"offset\"), :optional? false, :name \"offset\"}\n    {:schema (named Any \"msg\"), :optional? false, :name \"msg\"}]]},\n {:k :msg_id} Int,\n :in_reply_to Int}\n\n... but instead received\n\n{:in_reply_to 1, :type \"poll_ok\"}\n\nThis is malformed because:\n\n{:msgs missing-required-key}\n\nSee doc/protocol.md for more guidance."}})},
 :stats {:valid? false,
         :count 16031,
         :ok-count 0,
         :fail-count 0,
         :info-count 16031,
         :by-f {:assign {:valid? false,
                         :count 2066,
                         :ok-count 0,
                         :fail-count 0,
                         :info-count 2066},
                :crash {:valid? false,
                        :count 1,
                        :ok-count 0,
                        :fail-count 0,
                        :info-count 1},
                :poll {:valid? false,
                       :count 7090,
                       :ok-count 0,
                       :fail-count 0,
                       :info-count 7090},
                :send {:valid? false,
                       :count 6874,
                       :ok-count 0,
                       :fail-count 0,
                       :info-count 6874}}},
 :availability {:valid? true, :ok-fraction 0.0},
 :net {:all {:send-count 32062,
             :recv-count 32062,
             :msg-count 32062,
             :msgs-per-op 2.0},
       :clients {:send-count 32062,
                 :recv-count 32062,
                 :msg-count 32062},
       :servers {:send-count 0,
                 :recv-count 0,
                 :msg-count 0,
                 :msgs-per-op 0.0},
       :valid? true},
 :workload {:valid? :unknown,
            :error "java.lang.NullPointerException: Cannot invoke \"java.lang.Number.doubleValue()\" because \"x\" is null\n at clojure.lang.Numbers.divide (Numbers.java:3899)\n    jepsen.util$nanos__GT_secs.invokeStatic (util.clj:384)\n    jepsen.util$nanos__GT_secs.invoke (util.clj:384)\n    clojure.core$update.invokeStatic (core.clj:6231)\n    clojure.core$update.invoke (core.clj:6223)\n    jepsen.tests.kafka$checker$reify__19270.check (kafka.clj:2080)\n    jepsen.checker$check_safe.invokeStatic (checker.clj:86)\n    jepsen.checker$check_safe.invoke (checker.clj:79)\n    jepsen.checker$compose$reify__11881$fn__11883.invoke (checker.clj:102)\n    clojure.core$pmap$fn__8552$fn__8553.invoke (core.clj:7089)\n    clojure.core$binding_conveyor_fn$fn__5823.invoke (core.clj:2047)\n    clojure.lang.AFn.call (AFn.java:18)\n    java.util.concurrent.FutureTask.run (FutureTask.java:317)\n    java.util.concurrent.ThreadPoolExecutor.runWorker (ThreadPoolExecutor.java:1144)\n    java.util.concurrent.ThreadPoolExecutor$Worker.run (ThreadPoolExecutor.java:642)\n    java.lang.Thread.run (Thread.java:1583)\n"},
 :valid? false}
