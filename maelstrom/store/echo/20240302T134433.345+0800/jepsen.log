2024-03-02 13:44:33,364{GMT}	INFO	[jepsen test runner] jepsen.core: Command line:
lein run test -w echo --bin echo.rb --nodes n1 --time-limit 10 --log-stderr
2024-03-02 13:44:33,402{GMT}	INFO	[jepsen test runner] jepsen.core: Running test:
{:args []
 :remote
 #jepsen.control.retry.Remote{:remote #jepsen.control.scp.Remote{:cmd-remote #jepsen.control.sshj.SSHJRemote{:concurrency-limit 6,
                                                                                                             :conn-spec nil,
                                                                                                             :client nil,
                                                                                                             :semaphore nil},
                                                                 :conn-spec nil},
                              :conn nil}
 :log-net-send false
 :node-count nil
 :availability nil
 :max-txn-length 4
 :concurrency 1
 :db
 #object[maelstrom.db$db$reify__16142
         "0x12c66345"
         "maelstrom.db$db$reify__16142@12c66345"]
 :max-writes-per-key 16
 :leave-db-running? false
 :name "echo"
 :logging-json? false
 :start-time
 #object[org.joda.time.DateTime "0xb0c4670" "2024-03-02T13:44:33.345+08:00"]
 :nemesis-interval 10
 :net
 #object[maelstrom.net$jepsen_net$reify__15251
         "0x5344b208"
         "maelstrom.net$jepsen_net$reify__15251@5344b208"]
 :client
 #object[maelstrom.workload.echo$client$reify__16863
         "0x30769e7a"
         "maelstrom.workload.echo$client$reify__16863@30769e7a"]
 :barrier
 #object[java.util.concurrent.CyclicBarrier
         "0x14021c10"
         "java.util.concurrent.CyclicBarrier@14021c10"]
 :log-stderr true
 :pure-generators true
 :ssh {:dummy? true}
 :rate 5
 :checker
 #object[jepsen.checker$compose$reify__11881
         "0x7dd4f726"
         "jepsen.checker$compose$reify__11881@7dd4f726"]
 :argv
 ("test"
  "-w"
  "echo"
  "--bin"
  "echo.rb"
  "--nodes"
  "n1"
  "--time-limit"
  "10"
  "--log-stderr")
 :nemesis
 (jepsen.nemesis.ReflCompose
  {:fm {:start-partition 0,
        :stop-partition 0,
        :kill 1,
        :start 1,
        :pause 1,
        :resume 1},
   :nemeses [#unprintable "jepsen.nemesis.combined$partition_nemesis$reify__16416@bf6de66"
             #unprintable "jepsen.nemesis.combined$db_nemesis$reify__16397@ff7042c"]})
 :nodes ["n1"]
 :test-count 1
 :latency {:mean 0, :dist :constant}
 :bin "echo.rb"
 :generator
 (jepsen.generator.TimeLimit
  {:limit 10000000000,
   :cutoff nil,
   :gen (jepsen.generator.Any
         {:gens [(jepsen.generator.OnThreads
                  {:f #{:nemesis},
                   :context-filter #object[jepsen.generator.context$make_thread_filter$lazy_filter__9167
                                           "0x2339ad10"
                                           "jepsen.generator.context$make_thread_filter$lazy_filter__9167@2339ad10"],
                   :gen nil})
                 (jepsen.generator.OnThreads
                  {:f #jepsen.generator.context.AllBut{:element :nemesis},
                   :context-filter #object[jepsen.generator.context$make_thread_filter$lazy_filter__9167
                                           "0x1030ce34"
                                           "jepsen.generator.context$make_thread_filter$lazy_filter__9167@1030ce34"],
                   :gen (jepsen.generator.Stagger
                         {:dt 400000000,
                          :next-time nil,
                          :gen (jepsen.generator.EachThread
                                {:fresh-gen #object[maelstrom.workload.echo$workload$fn__16882
                                                    "0x74c3374f"
                                                    "maelstrom.workload.echo$workload$fn__16882@74c3374f"],
                                 :context-filters #object[clojure.core$promise$reify__8591
                                                          "0x3eea7c4b"
                                                          {:status :pending,
                                                           :val nil}],
                                 :gens {}})})})]})})
 :log-net-recv false
 :os
 #object[maelstrom.net$jepsen_os$reify__15254
         "0x50d507ab"
         "maelstrom.net$jepsen_os$reify__15254@50d507ab"]
 :time-limit 10
 :workload :echo
 :consistency-models [:strict-serializable]
 :topology :grid}

2024-03-02 13:44:34,241{GMT}	INFO	[jepsen node n1] maelstrom.net: Starting Maelstrom network
2024-03-02 13:44:34,242{GMT}	INFO	[jepsen test runner] jepsen.db: Tearing down DB
2024-03-02 13:44:34,243{GMT}	INFO	[jepsen test runner] jepsen.db: Setting up DB
2024-03-02 13:44:34,244{GMT}	INFO	[jepsen node n1] maelstrom.service: Starting services: (lin-kv lin-tso lww-kv seq-kv)
2024-03-02 13:44:34,245{GMT}	INFO	[jepsen node n1] maelstrom.db: Setting up n1
2024-03-02 13:44:34,245{GMT}	INFO	[jepsen node n1] maelstrom.process: launching echo.rb []
2024-03-02 13:44:34,262{GMT}	INFO	[n1 stderr] maelstrom.process: /System/Library/Frameworks/Ruby.framework/Versions/2.6/usr/lib/ruby/2.6.0/universal-darwin23/rbconfig.rb:21: warning: Insecure world writable dir /opt/homebrew/Cellar in PATH, mode 040777
2024-03-02 13:44:34,307{GMT}	INFO	[n1 stderr] maelstrom.process: Received "{\"id\":0,\"src\":\"c0\",\"dest\":\"n1\",\"body\":{\"type\":\"init\",\"node_id\":\"n1\",\"node_ids\":[\"n1\"],\"msg_id\":1}}\n"
2024-03-02 13:44:44,256{GMT}	INFO	[jepsen node n1] maelstrom.db: Tearing down n1
2024-03-02 13:44:45,286{GMT}	INFO	[jepsen node n1] maelstrom.net: Shutting down Maelstrom network
2024-03-02 13:44:45,288{GMT}	WARN	[jepsen test runner] jepsen.core: Test crashed!
clojure.lang.ExceptionInfo: Expected node n1 to respond to an init message, but node did not respond.
	at slingshot.support$stack_trace.invoke(support.clj:201)
	at maelstrom.db$db$reify__16142.setup_BANG_(db.clj:63)
	at jepsen.db$fn__8729$G__8723__8733.invoke(db.clj:12)
	at jepsen.db$fn__8729$G__8722__8738.invoke(db.clj:12)
	at clojure.core$partial$fn__5908.invoke(core.clj:2642)
	at jepsen.control$on_nodes$fn__8599.invoke(control.clj:314)
	at clojure.lang.AFn.applyToHelper(AFn.java:154)
	at clojure.lang.AFn.applyTo(AFn.java:144)
	at clojure.core$apply.invokeStatic(core.clj:667)
	at clojure.core$with_bindings_STAR_.invokeStatic(core.clj:1990)
	at clojure.core$with_bindings_STAR_.doInvoke(core.clj:1990)
	at clojure.lang.RestFn.applyTo(RestFn.java:142)
	at clojure.core$apply.invokeStatic(core.clj:671)
	at clojure.core$bound_fn_STAR_$fn__5818.doInvoke(core.clj:2020)
	at clojure.lang.RestFn.invoke(RestFn.java:408)
	at dom_top.core$real_pmap_helper$build_thread__211$fn__212.invoke(core.clj:163)
	at clojure.lang.AFn.applyToHelper(AFn.java:152)
	at clojure.lang.AFn.applyTo(AFn.java:144)
	at clojure.core$apply.invokeStatic(core.clj:667)
	at clojure.core$with_bindings_STAR_.invokeStatic(core.clj:1990)
	at clojure.core$with_bindings_STAR_.doInvoke(core.clj:1990)
	at clojure.lang.RestFn.invoke(RestFn.java:425)
	at clojure.lang.AFn.applyToHelper(AFn.java:156)
	at clojure.lang.RestFn.applyTo(RestFn.java:132)
	at clojure.core$apply.invokeStatic(core.clj:671)
	at clojure.core$bound_fn_STAR_$fn__5818.doInvoke(core.clj:2020)
	at clojure.lang.RestFn.invoke(RestFn.java:397)
	at clojure.lang.AFn.run(AFn.java:22)
	at java.base/java.lang.Thread.run(Thread.java:1583)
Caused by: clojure.lang.ExceptionInfo: Client read timeout
	at slingshot.support$stack_trace.invoke(support.clj:201)
	at maelstrom.client$recv_BANG_.invokeStatic(client.clj:98)
	at maelstrom.client$recv_BANG_.invoke(client.clj:81)
	at maelstrom.client$send_PLUS_recv_BANG_.invokeStatic(client.clj:123)
	at maelstrom.client$send_PLUS_recv_BANG_.invoke(client.clj:119)
	at maelstrom.client$rpc_BANG_.invokeStatic(client.clj:149)
	at maelstrom.client$rpc_BANG_.invoke(client.clj:140)
	at maelstrom.db$db$reify__16142.setup_BANG_(db.clj:48)
	... 27 common frames omitted
